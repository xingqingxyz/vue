{
  "author": "Ming Chen <cm.email@qq.com> (https://github.com/xingqingxyz)",
  "bugs": {
    "url": "https://github.com/xingqingxyz/vue/issues"
  },
  "capabilities": {
    "untrustedWorkspaces": {
      "supported": true
    },
    "virtualWorkspaces": true
  },
  "categories": [
    "Programming Languages",
    "Formatters"
  ],
  "contributes": {
    "breakpoints": [
      {
        "language": "vue"
      }
    ],
    "commands": [
      {
        "category": "Vue",
        "command": "vue.action.restartLanguageServer",
        "title": "Restart Vue Language Server"
      }
    ],
    "configuration": {
      "properties": {
        "vue.autoInsert.bracketSpacing": {
          "default": true,
          "markdownDescription": "Auto add space between double curly brackets: `{{|}}` -> `{{ | }}`",
          "type": "boolean"
        },
        "vue.autoInsert.dotValue": {
          "default": true,
          "markdownDescription": "Auto-complete Ref value with `.value`.",
          "type": "boolean"
        },
        "vue.format.script.initialIndent": {
          "default": false,
          "markdownDescription": "Initial indent for `<script>` block.",
          "type": "boolean"
        },
        "vue.format.style.initialIndent": {
          "default": false,
          "markdownDescription": "Initial indent for `<style>` block.",
          "type": "boolean"
        },
        "vue.format.template.initialIndent": {
          "default": false,
          "markdownDescription": "Initial indent for `<template>` block.",
          "type": "boolean"
        },
        "vue.format.wrapAttributes": {
          "default": "auto",
          "enum": [
            "auto",
            "force",
            "force-aligned",
            "force-expand-multiline",
            "aligned-multiple",
            "preserve",
            "preserve-aligned"
          ],
          "markdownDescription": "Wrap attributes.",
          "type": "string"
        },
        "vue.inlayHints.destructuredProps": {
          "default": true,
          "markdownDescription": "Show inlay hints for destructured props:\n\n```ts\nwatch(() => /* props. */foo, () => { ... });\n```",
          "type": "boolean"
        },
        "vue.inlayHints.inlineHandlerLeading": {
          "default": true,
          "markdownDescription": "Show inlay hints for event argument in inline handlers:\n\n```html\n<Comp @foo=\"/* $event => */console.log($event)\" />\n```",
          "type": "boolean"
        },
        "vue.inlayHints.missingProps": {
          "default": true,
          "markdownDescription": "Show inlay hints for missing required props:\n\n```html\n<Comp />\n<!-- ^ foo! -->\n```",
          "type": "boolean"
        },
        "vue.inlayHints.optionsWrapper": {
          "default": true,
          "markdownDescription": "Show inlay hints for component options wrapper for type support:\n\n```vue\n<script lang=\"ts\">\nexport default /* (await import('vue')).defineComponent( */{}/* ) */;\n</script>\n```",
          "type": "boolean"
        },
        "vue.inlayHints.vBindShorthand": {
          "default": true,
          "markdownDescription": "Show inlay hints for v-bind shorthand:\n\n```html\n<Comp :foo />\n     <!-- ^ =\"foo\" -->\n```",
          "type": "boolean"
        },
        "vue.server.path": {
          "markdownDescription": "Path to the `@vue/language-server` module. If not set, the server will be loaded from the extension's bundled.",
          "type": "string"
        },
        "vue.server.trace": {
          "default": "off",
          "enum": [
            "off",
            "messages",
            "verbose"
          ],
          "markdownDescription": "Traces the communication between VS Code and the language server.",
          "type": "string"
        },
        "vue.suggest.componentNameCasing": {
          "default": "preferPascalCase",
          "enum": [
            "preferKebabCase",
            "preferPascalCase",
            "alwaysKebabCase",
            "alwaysPascalCase"
          ],
          "enumDescriptions": [
            "Prefer kebab-case (lowercase with hyphens, e.g. my-component)",
            "Prefer PascalCase (UpperCamelCase, e.g. MyComponent)",
            "Always kebab-case (enforce kebab-case, e.g. my-component)",
            "Always PascalCase (enforce PascalCase, e.g. MyComponent)"
          ],
          "markdownDescription": "Preferred component name case.",
          "scope": "resource",
          "type": "string"
        },
        "vue.suggest.defineAssignment": {
          "default": true,
          "markdownDescription": "Auto add `const props = ` before `defineProps` when selecting the completion item `props`. (also `emit` and `slots`)",
          "type": "boolean"
        },
        "vue.suggest.propNameCasing": {
          "default": "preferKebabCase",
          "enum": [
            "preferKebabCase",
            "preferCamelCase",
            "alwaysKebabCase",
            "alwaysCamelCase"
          ],
          "enumDescriptions": [
            "Prefer kebab-case (lowercase with hyphens, e.g. my-prop)",
            "Prefer camelCase (lowerCamelCase, e.g. myProp)",
            "Always kebab-case (enforce kebab-case, e.g. my-prop)",
            "Always camelCase (enforce camelCase, e.g. myProp)"
          ],
          "markdownDescription": "Preferred attr name case.",
          "scope": "resource",
          "type": "string"
        }
      },
      "title": "Vue"
    },
    "grammars": [
      {
        "embeddedLanguages": {
          "meta.tag.js": "jsx-tags",
          "meta.tag.tsx": "jsx-tags",
          "meta.tag.without-attributes.js": "jsx-tags",
          "meta.tag.without-attributes.tsx": "jsx-tags",
          "source.coffee": "coffeescript",
          "source.css": "css",
          "source.css.less": "less",
          "source.css.scss": "scss",
          "source.graphql": "graphql",
          "source.js": "javascript",
          "source.js.jsx": "javascriptreact",
          "source.json": "json",
          "source.json.comments": "jsonc",
          "source.json5": "json5",
          "source.postcss": "postcss",
          "source.sass": "sass",
          "source.stylus": "stylus",
          "source.toml": "toml",
          "source.ts": "typescript",
          "source.tsx": "typescriptreact",
          "source.vue": "vue",
          "source.yaml": "yaml",
          "text": "plaintext",
          "text.html.derivative": "html",
          "text.html.markdown": "markdown",
          "text.pug": "jade"
        },
        "language": "vue",
        "path": "./syntaxes/vue.tmLanguage.json",
        "scopeName": "source.vue",
        "unbalancedBracketScopes": [
          "keyword.operator.relational",
          "storage.type.function.arrow",
          "keyword.operator.bitwise.shift",
          "meta.brace.angle",
          "punctuation.definition.tag"
        ]
      },
      {
        "embeddedLanguages": {
          "meta.embedded.block.vue": "vue",
          "meta.tag.js": "jsx-tags",
          "meta.tag.tsx": "jsx-tags",
          "meta.tag.without-attributes.js": "jsx-tags",
          "meta.tag.without-attributes.tsx": "jsx-tags",
          "source.coffee": "coffeescript",
          "source.css": "css",
          "source.css.less": "less",
          "source.css.scss": "scss",
          "source.graphql": "graphql",
          "source.js": "javascript",
          "source.js.jsx": "javascriptreact",
          "source.json": "json",
          "source.json.comments": "jsonc",
          "source.json5": "json5",
          "source.postcss": "postcss",
          "source.sass": "sass",
          "source.stylus": "stylus",
          "source.toml": "toml",
          "source.ts": "typescript",
          "source.tsx": "typescriptreact",
          "source.vue": "vue",
          "source.yaml": "yaml",
          "text": "plaintext",
          "text.html.derivative": "html",
          "text.html.markdown": "markdown",
          "text.pug": "jade"
        },
        "injectTo": [
          "text.html.markdown"
        ],
        "path": "./syntaxes/markdown-vue.json",
        "scopeName": "markdown.vue.codeblock"
      },
      {
        "embeddedLanguages": {
          "mdx.embedded.vue": "vue",
          "meta.tag.js": "jsx-tags",
          "meta.tag.tsx": "jsx-tags",
          "meta.tag.without-attributes.js": "jsx-tags",
          "meta.tag.without-attributes.tsx": "jsx-tags",
          "source.coffee": "coffeescript",
          "source.css": "css",
          "source.css.less": "less",
          "source.css.scss": "scss",
          "source.graphql": "graphql",
          "source.js": "javascript",
          "source.js.jsx": "javascriptreact",
          "source.json": "json",
          "source.json.comments": "jsonc",
          "source.json5": "json5",
          "source.postcss": "postcss",
          "source.sass": "sass",
          "source.stylus": "stylus",
          "source.toml": "toml",
          "source.ts": "typescript",
          "source.tsx": "typescriptreact",
          "source.vue": "vue",
          "source.yaml": "yaml",
          "text": "plaintext",
          "text.html.derivative": "html",
          "text.html.markdown": "markdown",
          "text.pug": "jade"
        },
        "injectTo": [
          "source.mdx"
        ],
        "path": "./syntaxes/mdx-vue.json",
        "scopeName": "mdx.vue.codeblock"
      },
      {
        "injectTo": [
          "source.vue"
        ],
        "path": "./syntaxes/vue-directives.json",
        "scopeName": "vue.directives"
      },
      {
        "injectTo": [
          "source.vue"
        ],
        "path": "./syntaxes/vue-interpolations.json",
        "scopeName": "vue.interpolations"
      },
      {
        "injectTo": [
          "source.vue"
        ],
        "path": "./syntaxes/vue-sfc-style-variable-injection.json",
        "scopeName": "vue.sfc.style.variable.injection"
      }
    ],
    "jsonValidation": [
      {
        "fileMatch": [
          "tsconfig.json",
          "tsconfig.*.json",
          "tsconfig-*.json",
          "jsconfig.json",
          "jsconfig.*.json",
          "jsconfig-*.json"
        ],
        "url": "./schemas/vue-tsconfig.schema.json"
      }
    ],
    "languages": [
      {
        "configuration": "./language-configuration.json",
        "extensions": [
          ".vue"
        ],
        "id": "vue"
      }
    ],
    "menus": {
      "commandPalette": [
        {
          "command": "typescript.reloadProjects",
          "when": "editorLangId == vue && typescript.isManagedFile"
        },
        {
          "command": "typescript.goToProjectConfig",
          "when": "editorLangId == vue && typescript.isManagedFile"
        },
        {
          "command": "typescript.sortImports",
          "when": "editorLangId == vue && supportedCodeAction =~ /(\\s|^)source\\.sortImports\\b/"
        },
        {
          "command": "typescript.removeUnusedImports",
          "when": "editorLangId == vue && supportedCodeAction =~ /(\\s|^)source\\.removeUnusedImports\\b/"
        }
      ],
      "editor/context": [
        {
          "command": "typescript.goToSourceDefinition",
          "group": "navigation@9",
          "when": "tsSupportsSourceDefinition && editorLangId == vue"
        }
      ],
      "editor/title/context": [
        {
          "command": "typescript.findAllFileReferences",
          "when": "tsSupportsFileReferences && editorLangId == vue"
        }
      ],
      "explorer/context": [
        {
          "command": "typescript.findAllFileReferences",
          "group": "4_search",
          "when": "tsSupportsFileReferences && resourceLangId == vue"
        }
      ]
    },
    "semanticTokenScopes": [
      {
        "language": "vue",
        "scopes": {
          "component": [
            "support.class.component.vue",
            "entity.name.type.class.vue"
          ]
        }
      }
    ],
    "typescriptServerPlugins": [
      {
        "configNamespace": "typescript",
        "enableForWorkspaceTypeScriptVersions": true,
        "languages": [
          "vue"
        ],
        "name": "@vue/typescript-plugin"
      }
    ]
  },
  "dependencies": {
    "@vue/typescript-plugin": "^3.1.2"
  },
  "description": "Vue language supports based on @vue/language-server.",
  "devDependencies": {
    "@rollup/plugin-commonjs": "^28.0.9",
    "@rollup/plugin-json": "^6.1.0",
    "@rollup/plugin-node-resolve": "^16.0.3",
    "@rollup/plugin-replace": "^6.0.2",
    "@rollup/plugin-terser": "^0.4.4",
    "@rollup/plugin-typescript": "^12.3.0",
    "@types/node": "~22.17.2",
    "@types/vscode": "^1.105.0",
    "@volar/vscode": "^2.4.23",
    "@vue/language-server": "^3.1.2",
    "oxlint": "^1.24.0",
    "rollup": "^4.52.5",
    "tslib": "^2.8.1",
    "typescript": "^5.9.3"
  },
  "displayName": "Vue",
  "engines": {
    "vscode": "^1.105.0"
  },
  "extensionKind": [
    "workspace"
  ],
  "license": "MIT",
  "main": "./dist/extension.js",
  "name": "vue",
  "packageManager": "pnpm@10.19.0",
  "prettier": {
    "semi": false,
    "singleQuote": true
  },
  "private": true,
  "publisher": "xingqingxyz",
  "repository": {
    "type": "git",
    "url": "https://github.com/xingqingxyz/vue"
  },
  "scripts": {
    "extension:install": "pnpm extension:pack && code --install-extension vue.vsix",
    "extension:pack": "rollup -c --environment NODE_ENV:production && node ./scripts/pack.ts",
    "extension:publish": "pnpm extension:pack && vsce publish -i vue.vsix",
    "lint": "tsc --noEmit && oxlint --fix src",
    "postinstall": "rollup -c --environment PREBUILD:1",
    "watch": "rollup -c -w"
  },
  "type": "module",
  "version": "0.2.0"
}
